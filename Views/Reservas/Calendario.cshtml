@model Reservas.Models.CalendarioViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@using Reservas.Models.ViewModels

@{
    ViewData["Title"] = "Calendario de Reservas";

    var centros = (ViewBag.Centros as IEnumerable<SelectListItem>) ?? Enumerable.Empty<SelectListItem>();
    var tipos = (ViewBag.Tipos as IEnumerable<SelectListItem>) ?? Enumerable.Empty<SelectListItem>();
    var recursos = (ViewBag.Recursos as IEnumerable<RecursoOptionVM>) ?? Enumerable.Empty<RecursoOptionVM>();

    int? centroSel = ViewBag.CentroId as int?;
    int? tipoSel = ViewBag.TipoId as int?;
    int? recursoSel = ViewBag.RecursoId as int?;
}

<h2 class="mb-4">Calendario</h2>

<div class="row g-3 mb-3">
    <div class="col-md-4">
        <label class="form-label">Centro</label>
        <select id="selCentro" class="form-select" data-selected="@centroSel">
            <option value="">— Selecciona —</option>
            @foreach (var c in centros)
            {
                <option value="@c.Value">@c.Text</option>
            }
        </select>
    </div>

    <div class="col-md-4">
        <label class="form-label">Tipo de recurso</label>
        <select id="selTipo" class="form-select" data-selected="@tipoSel">
            <option value="">— Selecciona —</option>
            @foreach (var t in tipos)
            {
                <option value="@t.Value">@t.Text</option>
            }
        </select>
    </div>

    <div class="col-md-4">
        <label class="form-label">Recurso</label>
        <select id="selRecurso" class="form-select" data-selected="@recursoSel">
            <option value="">— Selecciona —</option>
            @foreach (var r in recursos)
            {
                <option value="@r.Value" data-centro="@r.CenterId" data-tipo="@r.ResourceTypeId">
                    @r.Text
                </option>
            }
        </select>
    </div>
</div>

<div id="calendar"></div>

<!-- Modal detalle de reserva -->
<div class="modal fade" id="eventModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title">Detalle de reserva</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p><strong>Recurso:</strong> <span id="mRecurso"></span></p>
        <p><strong>Inicio:</strong> <span id="mInicio"></span></p>
        <p><strong>Fin:</strong> <span id="mFin"></span></p>
        <p><strong>Estado:</strong> <span id="mEstado"></span></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>

<!-- Toast (avisos rápidos) -->
<div class="position-fixed top-0 end-0 p-3" style="z-index: 1080">
  <div id="msgToast" class="toast align-items-center text-bg-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div id="msgToastBody" class="toast-body"></div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
  </div>
</div>


<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.css" rel="stylesheet" />

<style>
    /* Botones azules estilo Osakidetza */
    .fc .fc-button {
        background: linear-gradient(135deg, #004494, #005bb5);
        border: none;
        color: #fff;
        font-weight: 500;
        font-size: .95rem;
        border-radius: 8px;
        padding: .5rem 1rem;
        transition: all .2s ease-in-out;
        box-shadow: 0 2px 5px rgba(0,0,0,.15);
    }

        .fc .fc-button:hover {
            background: linear-gradient(135deg, #005bb5, #0077e6);
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,.25);
        }

        .fc .fc-button.fc-button-active {
            background: linear-gradient(135deg, #003366, #004080);
            color: #fff;
            box-shadow: inset 0 2px 6px rgba(0,0,0,.3);
            transform: none;
        }

    .fc .fc-today-button {
        background: linear-gradient(135deg, #0066cc, #004494);
        border: none;
        color: #fff;
    }

        .fc .fc-today-button:hover {
            background: linear-gradient(135deg, #0077e6, #005bb5);
        }
</style>

<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>

@section Scripts {
<script>
(function () {
  const selCentro  = document.getElementById('selCentro');
  const selTipo    = document.getElementById('selTipo');
  const selRecurso = document.getElementById('selRecurso');

  // helper: toast
  function showToast(msg) {
    document.getElementById('msgToastBody').textContent = msg;
    new bootstrap.Toast(document.getElementById('msgToast'), { delay: 3000 }).show();
  }

  // Preselección
  if (selCentro.dataset.selected)  selCentro.value  = selCentro.dataset.selected;
  if (selTipo.dataset.selected)    selTipo.value    = selTipo.dataset.selected;
  if (selRecurso.dataset.selected) selRecurso.value = selRecurso.dataset.selected;

  function filtrarTiposPorCentro() {
    const c = selCentro.value;
    const tiposVisibles = new Set();
    [...selRecurso.options].forEach(opt => {
      if (!opt.value) return;
      if (!c || opt.dataset.centro === c) tiposVisibles.add(opt.dataset.tipo);
    });
    let firstVisible = "";
    [...selTipo.options].forEach(opt => {
      if (!opt.value) return;
      const visible = !c || tiposVisibles.has(opt.value);
      opt.style.display = visible ? "" : "none";
      if (visible && !firstVisible) firstVisible = opt.value;
    });
    const sel = selTipo.selectedOptions[0];
    if (!sel || sel.style.display === "none") selTipo.value = firstVisible || "";
  }

  function filtrarRecursos() {
    const c = selCentro.value, t = selTipo.value;
    let firstVisibleValue = "";
    [...selRecurso.options].forEach(opt => {
      if (!opt.value) return;
      const ok = (!c || opt.dataset.centro === c) && (!t || opt.dataset.tipo === t);
      opt.style.display = ok ? "" : "none";
      if (ok && !firstVisibleValue) firstVisibleValue = opt.value;
    });
    const selOpt = selRecurso.selectedOptions[0];
    if (!selOpt || selOpt.style.display === "none") selRecurso.value = firstVisibleValue || "";
  }

  function onCentroChange() { filtrarTiposPorCentro(); filtrarRecursos(); cargarCalendario(); }
  function onTipoChange()   { filtrarRecursos(); cargarCalendario(); }

  selCentro.addEventListener('change', onCentroChange);
  selTipo.addEventListener('change',   onTipoChange);
  selRecurso.addEventListener('change', cargarCalendario);

  // --- FullCalendar ---
  let calendar;
  function cargarCalendario() {
    const recursoId = selRecurso.value;
    if (!recursoId) { if (calendar) calendar.destroy(); return; }

    const el = document.getElementById('calendar');
    if (calendar) calendar.destroy();

    calendar = new FullCalendar.Calendar(el, {
      initialView: 'timeGridWeek',
      slotMinTime: '07:00:00',
      slotMaxTime: '22:00:00',
      slotDuration: '00:30:00',
      allDaySlot: false,
      height: 'auto',
      locale: 'es',
      firstDay: 1,
      nowIndicator: true,
      headerToolbar: { left: 'prev,next today', center: 'title', right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek' },
      buttonText: { today: 'Hoy', month: 'Mes', week: 'Semana', day: 'Día', list: 'Agenda' },

      selectable: true,
      selectMirror: true,
      unselectAuto: true,
      selectAllow: info => (info.end - info.start) >= 30 * 60 * 1000,

      // Crear reserva desde selección
      select: function(info) {
        const recursoId = selRecurso.value;
        if (!recursoId) { showToast("Selecciona primero un recurso."); return; }
        if (info.start.toDateString() !== info.end.toDateString()) {
          showToast("La reserva debe ser dentro del mismo día.");
          return;
        }
        const base = '@Url.Action("Create", "Reservas")';
        const params = new URLSearchParams({
          recursoId: recursoId,
          centroId: selCentro.value || "",
          tipoId: selTipo.value || "",
          inicio: info.start.toISOString(),
          fin: info.end.toISOString()
        });
        window.location.href = `${base}?${params.toString()}`;
      },

      // Carga de eventos
      events: function(info, success, failure) {
        const recursoId = selRecurso.value;
        if (!recursoId) { success([]); return; }
        const base = '@Url.Action("CalendarioEventos", "Reservas")';
        const url  = `${base}?recursoId=${encodeURIComponent(recursoId)}&start=${info.start.toISOString()}&end=${info.end.toISOString()}`;
        fetch(url, { cache: "no-store" })
          .then(r => { if (!r.ok) throw new Error(`${r.status} ${r.statusText}`); return r.json(); })
          .then(data => success(data))
          .catch(err => { console.error(err); failure(err); });
      },

      eventTimeFormat: { hour: '2-digit', minute: '2-digit' },

      // Detalle de evento sin alert()
      eventClick: function(info) {
        const e = info.event;
        document.getElementById("mRecurso").textContent = e.title.replace(/\s*\(.*\)\s*$/, "");
        document.getElementById("mInicio").textContent  = e.start ? e.start.toLocaleString() : "";
        document.getElementById("mFin").textContent     = e.end ? e.end.toLocaleString() : "";
        const estado = e.extendedProps?.status || (e.title.match(/\((.*?)\)/)?.[1] ?? "");
        document.getElementById("mEstado").textContent  = estado;
        new bootstrap.Modal(document.getElementById("eventModal")).show();
      }
    });

    calendar.render();
  }

  // Carga inicial
  onCentroChange();
})();
</script>
}
